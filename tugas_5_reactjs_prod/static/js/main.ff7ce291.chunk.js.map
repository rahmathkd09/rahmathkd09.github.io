{"version":3,"sources":["Lib/DaftarMakanan.js","Form/FormMakanan.js","Page/MenuMakanan.js","App.js","serviceWorker.js","index.js"],"names":["DaftarMakanan","NamaMakanan","Harga","img","FormMakanan","props","state","pesanan","jumlah","handleChange","bind","handleSubmit","handleChangeJumlah","React","createRef","e","this","setState","target","value","preventDefault","alert","current","focus","onSubmit","onChange","type","ref","placeholder","Component","listmakanan","MenuMakanan","map","index","key","src","alt","width","height","data","App","align","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNA2BmBA,EA3BC,CAChB,CACIC,YAAa,cACbC,MAAO,SACPC,IAAK,4EAET,CACIF,YAAa,OACbC,MAAO,SACPC,IAAK,sEAET,CACIF,YAAa,OACbC,MAAO,SACPC,IAAK,8EAET,CACIF,YAAa,YACbC,MAAO,SACPC,IAAK,2GAET,CACIF,YAAa,cACbC,MAAO,SACPC,IAAK,6F,OC2BEC,E,kDAhDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAAEC,QAAQ,GAAIC,OAAO,IAClC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAC1B,EAAKH,QAAUM,IAAMC,YANL,E,yDAQLC,GACXC,KAAKC,SAAS,CAACV,QAAQQ,EAAEG,OAAOC,U,yCAEfJ,GACjBC,KAAKC,SAAS,CAACT,OAAOO,EAAEG,OAAOC,U,mCAEpBJ,GACXA,EAAEK,iBACFC,MACE,yBAA2BL,KAAKV,MAAMC,QAAU,uBAAyBS,KAAKV,MAAME,QAEtFQ,KAAKC,SAAS,CAACV,QAAQ,GAAGC,OAAO,KACjCQ,KAAKT,QAAQe,QAAQC,U,+BAGrB,OACE,6BACE,gCACE,0BAAMC,SAAUR,KAAKL,cACnB,2BACEc,SAAUT,KAAKP,aACfiB,KAAK,OACLP,MAAOH,KAAKV,MAAMC,QAClBoB,IAAKX,KAAKT,QACVqB,YAAY,yBAEd,2BACEF,KAAK,SACLP,MAAOH,KAAKV,MAAME,OAClBiB,SAAUT,KAAKJ,mBACfgB,YAAY,2BAEd,6BAAK,6BACL,2BAAOF,KAAK,SAASP,MAAM,iB,GA1CbU,aCGpBC,EAAc,CAClB,CACE7B,YAAa,cACbC,MAAO,UAET,CACED,YAAa,OACbC,MAAO,UAET,CACED,YAAa,OACbC,MAAO,UAET,CACED,YAAa,OACbC,MAAO,UAET,CACED,YAAa,cACbC,MAAO,WAgDK6B,E,uKA1CZ,OACE,6BACE,wDACA,+BACE,+BACE,4BACG/B,EAAcgC,KAAI,SAACb,EAAMc,GACxB,OACE,wBAAIC,IAAKD,GACP,yBACEE,IAAOhB,EAAMhB,IACbiC,IAAI,kBACJC,MAAM,MACNC,OAAO,QAET,gCACE,2BAAInB,EAAMlB,aACV,0CAAgBkB,EAAMjB,eASpC,4CACC4B,EAAYE,KAAI,SAACO,EAAKN,GACrB,OACE,yBAAKC,IAAKD,GACR,2BACGM,EAAKtC,YADR,gBACkCsC,EAAKrC,WAM7C,kBAAC,EAAD,W,GAvCkB2B,aChBXW,MATf,WACE,OACE,yBAAKC,MAAM,UACT,gDACA,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ff7ce291.chunk.js","sourcesContent":["const DaftarMakanan=[\r\n    {\r\n        NamaMakanan: \"Nasi Padang\",\r\n        Harga: \"20.000\",\r\n        img: \"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/nasipadang.jpg\"\r\n    },\r\n    {\r\n        NamaMakanan: \"Sate\",\r\n        Harga: \"20.000\",\r\n        img: \"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/sate.png\"\r\n    },\r\n    {\r\n        NamaMakanan: \"Soto\",\r\n        Harga: \"10.000\",\r\n        img: \"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/sotolamongan.png\"\r\n    },\r\n    {\r\n        NamaMakanan: \"Nasi Uduk\",\r\n        Harga: \"15.000\",\r\n        img: \"https://www.dbs.com/iwov-resources/images/newsroom/indonesia/Blog/masakan%20nusantara/nasi%20kentut.png\"\r\n    },\r\n    {\r\n        NamaMakanan: \"Nasi Kuning\",\r\n        Harga: \"20.000\",\r\n        img: \"https://blog.tokowahab.com/wp-content/uploads/2020/03/Resep-Nasi-Kuning-Tumpeng-Mini.jpg\"\r\n    }]\r\n\r\n    export default DaftarMakanan","import React, {Component} from 'react';\r\n\r\nclass FormMakanan extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = { pesanan:\"\", jumlah:\"\"}\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChangeJumlah = this.handleChangeJumlah.bind(this);\r\n    this.pesanan = React.createRef();\r\n  }\r\n  handleChange(e){\r\n    this.setState({pesanan:e.target.value})\r\n  }\r\n  handleChangeJumlah(e){\r\n    this.setState({jumlah:e.target.value})\r\n  }\r\n  handleSubmit(e){\r\n    e.preventDefault()\r\n    alert(\r\n      \"Pesanan Anda Adalah : \" + this.state.pesanan + \" | Jumlah Pesanan : \" + this.state.jumlah\r\n    )\r\n    this.setState({pesanan:\"\",jumlah:\"\"})\r\n    this.pesanan.current.focus()\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <center>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <input\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              value={this.state.pesanan}\r\n              ref={this.pesanan}\r\n              placeholder=\"Masukan Pesanan Anda\"\r\n            />\r\n            <input\r\n              type=\"number\"\r\n              value={this.state.jumlah}\r\n              onChange={this.handleChangeJumlah}\r\n              placeholder=\"Masukan Jumlah Pesanan\"\r\n            />\r\n            <br/><br/>\r\n            <input type=\"submit\" value=\"Pesan\"/>\r\n          </form>\r\n        </center>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default FormMakanan;","import React, {Component} from 'react';\r\n\r\nimport DaftarMakanan from '../Lib/DaftarMakanan';\r\nimport FormMakanan from '../Form/FormMakanan';\r\n\r\nconst listmakanan = [\r\n  {\r\n    NamaMakanan: \"Nasi Padang\",\r\n    Harga: \"20.000\"\r\n  },\r\n  {\r\n    NamaMakanan: \"Sate\",\r\n    Harga: \"20.000\"\r\n  },\r\n  {\r\n    NamaMakanan: \"Soto\",\r\n    Harga: \"10.000\"\r\n  },\r\n  {\r\n    NamaMakanan: \"Uduk\",\r\n    Harga: \"10.000\"\r\n  },\r\n  {\r\n    NamaMakanan: \"Nasi Kuning\",\r\n    Harga: \"15.000\"\r\n  }\r\n]\r\n\r\nclass MenuMakanan extends Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h3>Daftar Makanan Favourite</h3>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              {DaftarMakanan.map((value,index) => {\r\n                return(\r\n                  <td key={index}>\r\n                    <img\r\n                      src = {value.img}\r\n                      alt=\"Product Makanan\"\r\n                      width=\"150\"\r\n                      height=\"100\"\r\n                    />\r\n                    <center>\r\n                      <p>{value.NamaMakanan}</p>\r\n                      <p>Harga : Rp. {value.Harga}</p>\r\n                    </center>\r\n                  </td>\r\n                )\r\n              })\r\n              }\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <h4>List Makanan</h4>\r\n        {listmakanan.map((data,index)=>{\r\n          return(\r\n            <div key={index}>\r\n              <p>\r\n                {data.NamaMakanan} | Harga Rp. {data.Harga}\r\n              </p>\r\n            </div>\r\n          )\r\n        }\r\n        )}\r\n        <FormMakanan/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n export default MenuMakanan;","import React from 'react';\nimport MenuMakanan from './Page/MenuMakanan'\n\nfunction App() {\n  return (\n    <div align=\"center\">\n      <h6>TUGAS 5 REACT JS</h6>\n      <MenuMakanan/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}